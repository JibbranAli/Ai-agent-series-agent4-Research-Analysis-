#!/usr/bin/env python3
"""
Report Generator - Simplified Version
Report generation functionality for creating professional reports
"""

import json
from datetime import datetime
from typing import Dict, List, Any

class ReportGenerator:
    """
    Simple report generator for creating professional reports
    """
    
    def __init__(self):
        self.config = self.load_config()
    
    def load_config(self):
        """Load configuration"""
        try:
            with open('config.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {"agent_name": "Research & Analysis Agent"}
    
    def create_report(self, title: str, data: Dict[str, Any], 
                     report_type: str = "comprehensive") -> str:
        """
        Create a comprehensive report
        
        Args:
            title: Report title
            data: Research data
            report_type: Type of report
            
        Returns:
            Report content as string
        """
        print(f"Creating report: {title}")
        
        report = f"""# {title}

**Generated by:** Research & Analysis Agent  
**Created by:** Syed Jibbran Ali  
**Date:** {datetime.now().strftime('%Y-%m-%d')}  
**Report Type:** {report_type.title()}

---

## Executive Summary

"""
        
        # Add executive summary
        summary = self.generate_executive_summary(data)
        report += summary + "\n\n"
        
        # Add company analysis if available
        if 'company' in data:
            report += self.add_company_section(data['company'])
        
        # Add market analysis if available
        if 'market' in data:
            report += self.add_market_section(data['market'])
        
        # Add competitor analysis if available
        if 'competitors' in data:
            report += self.add_competitor_section(data['competitors'])
        
        # Add trend analysis if available
        if 'trends' in data:
            report += self.add_trend_section(data['trends'])
        
        # Add opportunities if available
        if 'opportunities' in data:
            report += self.add_opportunity_section(data['opportunities'])
        
        # Add recommendations
        report += self.add_recommendations_section(data)
        
        # Add sources if available
        if 'sources' in data:
            report += self.add_sources_section(data['sources'])
        
        # Add footer
        report += self.add_footer()
        
        return report
    
    def generate_executive_summary(self, data: Dict[str, Any]) -> str:
        """Generate executive summary"""
        summary_parts = []
        
        if 'company' in data:
            company = data['company']
            summary_parts.append(f"This report analyzes {company['name']}, a leading company in the {company['industry']} industry.")
            summary_parts.append(f"The company shows strong financial performance with a market cap of ${company['market_cap']:,}.")
        
        if 'market' in data:
            market = data['market']
            summary_parts.append(f"The {market['industry']} market is valued at ${market['market_size']:,} with a growth rate of {market['growth_rate']}%.")
        
        if 'competitors' in data:
            competitor_count = len(data['competitors'])
            summary_parts.append(f"Competitive analysis includes {competitor_count} major market players.")
        
        if 'trends' in data:
            trend_count = len(data['trends'])
            summary_parts.append(f"Analysis identified {trend_count} significant trends affecting the market.")
        
        if not summary_parts:
            summary_parts.append("This comprehensive analysis provides insights into market dynamics and opportunities.")
        
        return " ".join(summary_parts)
    
    def add_company_section(self, company: Dict[str, Any]) -> str:
        """Add company analysis section"""
        section = f"""## Company Analysis: {company['name']}

### Overview
{company['description']}

### Key Metrics
- **Industry:** {company['industry']}
- **Market Cap:** ${company['market_cap']:,}
- **Revenue:** ${company['revenue']:,}
- **Employees:** {company['employees']:,}
- **Founded:** {company['founded_year']}
- **Headquarters:** {company['headquarters']}

### SWOT Analysis

#### Strengths
"""
        for strength in company['strengths']:
            section += f"- {strength}\n"
        
        section += "\n#### Weaknesses\n"
        for weakness in company['weaknesses']:
            section += f"- {weakness}\n"
        
        section += "\n#### Opportunities\n"
        for opportunity in company['opportunities']:
            section += f"- {opportunity}\n"
        
        section += "\n#### Threats\n"
        for threat in company['threats']:
            section += f"- {threat}\n"
        
        section += "\n"
        return section
    
    def add_market_section(self, market: Dict[str, Any]) -> str:
        """Add market analysis section"""
        section = f"""## Market Analysis: {market['industry']}

### Market Overview
- **Market Size:** ${market['market_size']:,}
- **Growth Rate:** {market['growth_rate']}%
- **Market Maturity:** {market.get('market_maturity', 'Growing')}

### Key Players
"""
        for player in market['key_players']:
            section += f"- {player}\n"
        
        section += "\n### Market Trends\n"
        for trend in market['trends']:
            section += f"- {trend}\n"
        
        section += "\n### Opportunities\n"
        for opportunity in market['opportunities']:
            section += f"- {opportunity}\n"
        
        section += "\n### Challenges\n"
        for challenge in market['challenges']:
            section += f"- {challenge}\n"
        
        section += "\n"
        return section
    
    def add_competitor_section(self, competitors: List[Dict[str, Any]]) -> str:
        """Add competitor analysis section"""
        section = "## Competitive Analysis\n\n"
        
        for i, competitor in enumerate(competitors, 1):
            section += f"### {i}. {competitor['name']}\n"
            section += f"- **Market Share:** {competitor['market_share']}%\n"
            section += f"- **Revenue:** ${competitor['revenue']:,}\n"
            section += f"- **Employees:** {competitor['employees']:,}\n"
            section += f"- **Position:** {competitor.get('competitive_position', 'Unknown')}\n"
            
            if 'strengths' in competitor:
                section += "- **Strengths:**\n"
                for strength in competitor['strengths']:
                    section += f"  - {strength}\n"
            
            section += "\n"
        
        return section
    
    def add_trend_section(self, trends: List[Dict[str, Any]]) -> str:
        """Add trend analysis section"""
        section = "## Trend Analysis\n\n"
        
        for i, trend in enumerate(trends, 1):
            section += f"### {i}. {trend['name']}\n"
            section += f"- **Category:** {trend['category']}\n"
            section += f"- **Growth Rate:** {trend['growth_rate']}%\n"
            section += f"- **Adoption Level:** {trend['adoption_level']}\n"
            section += f"- **Impact:** {trend['impact']}\n"
            section += f"- **Confidence:** {trend['confidence']}\n"
            section += f"- **Description:** {trend['description']}\n"
            
            if 'key_indicators' in trend:
                section += "- **Key Indicators:**\n"
                for indicator in trend['key_indicators']:
                    section += f"  - {indicator}\n"
            
            section += "\n"
        
        return section
    
    def add_opportunity_section(self, opportunities: Dict[str, Any]) -> str:
        """Add opportunity analysis section"""
        section = f"""## Market Opportunities: {opportunities['industry']}

### Overview
- **Region:** {opportunities['region']}
- **Market Size:** ${opportunities['market_size']:,}
- **Growth Potential:** {opportunities['growth_potential']}%

### Investment Opportunities
"""
        for opportunity in opportunities['investment_opportunities']:
            section += f"- {opportunity}\n"
        
        section += "\n### Growth Drivers\n"
        for driver in opportunities['growth_drivers']:
            section += f"- {driver}\n"
        
        section += "\n### Risk Factors\n"
        for risk in opportunities['risk_factors']:
            section += f"- {risk}\n"
        
        section += "\n### Entry Strategies\n"
        for strategy in opportunities['entry_strategies']:
            section += f"- {strategy}\n"
        
        section += "\n"
        return section
    
    def add_recommendations_section(self, data: Dict[str, Any]) -> str:
        """Add recommendations section"""
        section = "## Strategic Recommendations\n\n"
        
        recommendations = [
            "Monitor market trends and competitive developments closely",
            "Focus on innovation and differentiation strategies",
            "Strengthen competitive positioning through strategic partnerships",
            "Explore new market opportunities and expansion possibilities",
            "Invest in technology and digital transformation initiatives"
        ]
        
        # Add specific recommendations based on data
        if 'company' in data:
            company = data['company']
            recommendations.append(f"Leverage {company['name']}'s strengths in {company['industry']}")
        
        if 'trends' in data:
            high_growth_trends = [t for t in data['trends'] if t.get('growth_rate', 0) > 30]
            if high_growth_trends:
                recommendations.append(f"Focus on {len(high_growth_trends)} high-growth trends for immediate opportunities")
        
        for i, rec in enumerate(recommendations, 1):
            section += f"{i}. {rec}\n"
        
        section += "\n"
        return section
    
    def add_sources_section(self, sources: List[str]) -> str:
        """Add sources section"""
        section = "## Sources\n\n"
        
        for i, source in enumerate(sources, 1):
            section += f"{i}. {source}\n"
        
        section += "\n"
        return section
    
    def add_footer(self) -> str:
        """Add report footer"""
        return f"""---

## Report Information

**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Generated by:** Research & Analysis Agent  
**Version:** 1.0.0

*This report is generated automatically based on available data and analysis. For the most current information, please verify with primary sources.*

---

**Disclaimer:** This report is for informational purposes only and should not be considered as financial or investment advice. Always conduct your own research and consult with qualified professionals before making any decisions.
"""
    
    def save_as_markdown(self, report_content: str, filename: str) -> str:
        """Save report as Markdown file"""
        try:
            if not filename.endswith('.md'):
                filename += '.md'
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            return f"Report saved as Markdown: {filename}"
        except Exception as e:
            return f"Error saving Markdown report: {str(e)}"
    
    def save_as_txt(self, report_content: str, filename: str) -> str:
        """Save report as text file"""
        try:
            if not filename.endswith('.txt'):
                filename += '.txt'
            
            # Convert markdown to plain text (simple conversion)
            text_content = report_content.replace('#', '').replace('**', '').replace('*', '')
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(text_content)
            
            return f"Report saved as text: {filename}"
        except Exception as e:
            return f"Error saving text report: {str(e)}"
    
    def save_as_html(self, report_content: str, filename: str) -> str:
        """Save report as HTML file"""
        try:
            if not filename.endswith('.html'):
                filename += '.html'
            
            # Simple HTML conversion
            html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Research Report</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
        h1 {{ color: #2c3e50; border-bottom: 2px solid #3498db; }}
        h2 {{ color: #34495e; margin-top: 30px; }}
        h3 {{ color: #7f8c8d; }}
        ul {{ margin: 10px 0; }}
        li {{ margin: 5px 0; }}
        .footer {{ margin-top: 50px; padding-top: 20px; border-top: 1px solid #bdc3c7; font-size: 12px; color: #7f8c8d; }}
    </style>
</head>
<body>
{self.markdown_to_html(report_content)}
</body>
</html>"""
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            return f"Report saved as HTML: {filename}"
        except Exception as e:
            return f"Error saving HTML report: {str(e)}"
    
    def markdown_to_html(self, markdown_text: str) -> str:
        """Simple markdown to HTML conversion"""
        html = markdown_text
        
        # Convert headers
        html = html.replace('# ', '<h1>').replace('\n# ', '</h1>\n<h1>')
        html = html.replace('## ', '<h2>').replace('\n## ', '</h2>\n<h2>')
        html = html.replace('### ', '<h3>').replace('\n### ', '</h3>\n<h3>')
        
        # Convert bold
        html = html.replace('**', '<strong>').replace('**', '</strong>')
        
        # Convert lists
        html = html.replace('- ', '<li>').replace('\n- ', '</li>\n<li>')
        
        # Convert line breaks
        html = html.replace('\n', '<br>\n')
        
        return html
    
    def create_summary_report(self, title: str, data: Dict[str, Any]) -> str:
        """Create a summary report"""
        print(f"Creating summary report: {title}")
        
        summary = f"""# {title} - Executive Summary

**Date:** {datetime.now().strftime('%Y-%m-%d')}  
**Generated by:** Research & Analysis Agent

## Key Findings

"""
        
        # Add key findings based on data
        if 'company' in data:
            company = data['company']
            summary += f"**Company:** {company['name']} operates in the {company['industry']} industry.\n\n"
        
        if 'market' in data:
            market = data['market']
            summary += f"**Market:** The {market['industry']} market is valued at ${market['market_size']:,}.\n\n"
        
        if 'trends' in data:
            summary += f"**Trends:** {len(data['trends'])} significant trends identified.\n\n"
        
        summary += """## Recommendations

1. Monitor market developments closely
2. Focus on innovation and differentiation
3. Strengthen competitive positioning
4. Explore growth opportunities

---
*Summary generated by Research & Analysis Agent*
"""
        
        return summary

def main():
    """Demo function"""
    print("Report Generator - Demo")
    print("=" * 30)
    
    generator = ReportGenerator()
    
    # Demo data
    demo_data = {
        'company': {
            'name': 'Tesla',
            'industry': 'Electric Vehicles',
            'market_cap': 800000000000,
            'revenue': 50000000000,
            'employees': 100000,
            'founded_year': 2003,
            'headquarters': 'Austin, TX',
            'description': 'Tesla is a leading electric vehicle manufacturer.',
            'strengths': ['Innovation', 'Brand', 'Technology'],
            'weaknesses': ['Competition', 'Costs'],
            'opportunities': ['Market growth', 'Expansion'],
            'threats': ['Competition', 'Regulation']
        },
        'market': {
            'industry': 'Electric Vehicles',
            'market_size': 500000000000,
            'growth_rate': 25.5,
            'key_players': ['Tesla', 'BYD', 'BMW'],
            'trends': ['Battery tech', 'Autonomous driving'],
            'opportunities': ['Market expansion', 'Technology'],
            'challenges': ['Competition', 'Costs']
        },
        'competitors': [
            {'name': 'BYD', 'market_share': 18.2, 'revenue': 30000000000, 'employees': 200000},
            {'name': 'BMW', 'market_share': 12.8, 'revenue': 25000000000, 'employees': 150000}
        ],
        'trends': [
            {'name': 'Battery Innovation', 'growth_rate': 45, 'category': 'Technology'},
            {'name': 'Autonomous Driving', 'growth_rate': 35, 'category': 'Technology'}
        ]
    }
    
    # Demo comprehensive report
    print("\n1. Creating Comprehensive Report:")
    report = generator.create_report("Tesla Market Analysis", demo_data)
    result = generator.save_as_markdown(report, "tesla_analysis")
    print(f"   {result}")
    
    # Demo summary report
    print("\n2. Creating Summary Report:")
    summary = generator.create_summary_report("Tesla Summary", demo_data)
    result = generator.save_as_txt(summary, "tesla_summary")
    print(f"   {result}")
    
    # Demo HTML report
    print("\n3. Creating HTML Report:")
    result = generator.save_as_html(report, "tesla_analysis")
    print(f"   {result}")
    
    print("\nDemo completed successfully!")

if __name__ == "__main__":
    main()
